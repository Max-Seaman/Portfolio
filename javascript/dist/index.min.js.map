{"version":3,"sources":["index.js"],"names":["form","document","getElementById","setError","input","message","isValid","parentElement","inputControl","querySelector","innerText","classList","remove","add","setSuccess","inputControls","control","event","addEventListener","target","querySelectorAll","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","errorDisplay","Symbol","iterator","next","done","value","err","_i","_requiredFields","length","fieldName","elements","trim","concat","placeholder","replace","test","telephoneValue","telephoneInput","emailRegex","telephoneRegex","alert","reset","_step2"],"mappings":"aAAA,IAAMA,KAAOC,SAASC,eAAe,QA8ErC,SAASC,SAASC,EAAOC,GAjBrB,IAAIC,EAASF,EAAAG,cACHC,EAAAC,cACN,UAmBSC,UAAYL,EAhBrBL,EALSW,UAOTC,OAAA,WAgBJJ,EAAaG,UAAUE,IAAI,SAvBd,SAAAC,WAAAV,GAAA,IAAAI,EAAAJ,EAAAG,cA4BQC,EAAaC,cAAc,UAnB5CC,UAAsBK,GAAeP,EAA1BQ,UAA0BJ,OAAA,SACjCI,EAAQL,UAAUC,IAAAA,WAvE9BZ,KAAMA,iBAAgBE,SAAAA,SAAAA,GAElBe,EAACC,iBAGD,IAAUlB,EAAGiB,EAAME,OAQfb,GAAU,EAIHU,EAAyBhB,EAAAoB,iBAAA,wBAjBxCC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAiBI,IAAA,IAAAC,EAAAC,EAAsBC,EAAtBC,OAAAC,cAAAR,GAAAI,EAAAC,EAAAI,QAAAC,MAAAV,GAAA,EAAoC,CAAAI,EAAAO,MACxBrB,UAAUC,OAAO,UAlBjC,MAAAqB,GAAAX,GAAA,EAAAC,EAAAU,EAAA,QAAA,IAAAZ,GAAA,MAAAK,EAAA,QAAAA,EAAA,SAAA,QAAA,GAAAJ,EAAA,MAAAC,GAE2C,IAAA,IAAAW,EAAA,EAAAC,EAKnC,CAMA7B,YALA,WAQEqB,QAdiC,UAAA,WAAAO,EAAAC,EAAAC,OAAAF,IAAA,CAAA,IAAAG,EAAAF,EAAAD,GAAA9B,EAAAJ,EAAAsC,SAAAD,GAAAL,EAAA5B,EAAA4B,MAAAO,OAAA,GAAA,KAAAP,GAAA7B,SAAAC,EAAA,GAAAoC,OAAApC,EAAAqC,YAAAC,QAAA,MAAA,IAAA,kBAAApC,GAAA,GAAAQ,WAAAV,GAAA,UAAAiC,EAAA,CAiCjB,KAAVL,GAjC2B,6BAiCCW,KAAKX,KAb7C7B,SAAAC,EAAA,8BAASiC,GAAS,IAMV/B,IAAAA,EAAAL,SAAAC,eAAA,aAFJ0C,EAGOC,EAAAb,MAAAO,OAEN,GAAA,KAAAK,EAAA,CAEGP,IAAAA,EAAJQ,EAA2BtC,cACJC,EAAAC,cAAnB,UACcC,UAAOoC,GACjB3C,EAASC,UAAOQ,OAAA,QAAA,eANpB,WAOI+B,KAAAC,GAoBR9B,WAAW+B,IAnBN1C,SAAA0C,EAAA,qCACJvC,GAAA,GAML,GAAMyC,EAAAA,CAiBFC,MAAM,gCAINhD,EAAKiD,QAfLtB,IAAAA,EAAyB3B,EAAzBoB,iBAAA,kBANE2B,GAAAA,EAAAA,GAAAA,EAAAA,OAAAA,EAAAA,IAOFvC,IAAAA,IAAAA,EAAAA,EAAuBI,EAAvBJ,OAAAA,cAAAA,GAAAA,EAAAA,EAAAA,QAAAA,MAAAA,GAAAA,EAAuC,CAAA0C,EAAAlB,MAC/Be,UAAeJ,OAAKC,YAR1BG,MAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,QAAAA,IAAAA,GAAAA,MAAAA,EAAAA,QAAAA,EAAAA,SAAAA,QAAAA,GAAAA,EAAAA,MAAAA","file":"index.min.js","sourcesContent":["const form = document.getElementById('form');\r\n\r\nform.addEventListener('submit', (event) => {\r\n    event.preventDefault();\r\n    \r\n    const form = event.target;\r\n    const requiredFields = [\r\n        'firstname',\r\n        'lastname',\r\n        'email',\r\n        'subject',\r\n        'message',\r\n    ]\r\n    let isValid = true;\r\n\r\n    // Clear error statements from before\r\n    const errorDisplay = form.querySelectorAll('.input-control.error');\r\n    for (const control of errorDisplay) {\r\n        control.classList.remove('error');\r\n    }\r\n      \r\n    // Validation for each field in the array\r\n    for (let fieldName of requiredFields) {\r\n        const input = form.elements[fieldName];\r\n        const value = input.value.trim();\r\n\r\n        if (value === '') {\r\n            setError(input, `${input.placeholder.replace(/\\*$/, '')} is required.`);\r\n            isValid = false;\r\n        } else {\r\n            setSuccess(input);\r\n        }\r\n\r\n        if (fieldName === 'email') {\r\n            const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n            if (value !== '' && !emailRegex.test(value)) {\r\n                setError(input, 'Please enter a valid email');\r\n                isValid = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Separate validation for the phone number as its not a required field\r\n    const telephoneInput = document.getElementById('telephone');\r\n    const telephoneValue = telephoneInput.value.trim();\r\n    const telephoneRegex = /^\\d{11}$/;\r\n    if (telephoneValue === '') {\r\n        // If field is cleared, remove both error and success classes\r\n        const inputControl = telephoneInput.parentElement;\r\n        const errorDisplay = inputControl.querySelector('.error');\r\n        \r\n        errorDisplay.innerText = '';\r\n        inputControl.classList.remove('error', 'success');\r\n    } else if (!telephoneRegex.test(telephoneValue)) {\r\n        setError(telephoneInput, 'Please enter a valid phone number');\r\n        isValid = false;\r\n    } else {\r\n        setSuccess(telephoneInput);\r\n    }\r\n\r\n    // Alert message when everything is correct\r\n    if (isValid) {\r\n        alert('Form submitted successfully!');\r\n        // will add form.submit() here when needed \r\n\r\n        // Reset the form fields\r\n        form.reset();\r\n\r\n        // Remove success classes\r\n        const inputControls = form.querySelectorAll('.input-control');\r\n        for (const control of inputControls) {\r\n            control.classList.remove('success');\r\n        }\r\n    }\r\n\r\n});\r\n\r\n// Functions for the error and success messages\r\nfunction setError(input, message) {\r\n    const inputControl = input.parentElement;\r\n    const errorDisplay = inputControl.querySelector('.error');\r\n\r\n    errorDisplay.innerText = message;\r\n    inputControl.classList.remove('success');\r\n    inputControl.classList.add('error');\r\n}\r\n\r\nfunction setSuccess(input) {\r\n    const inputControl = input.parentElement;\r\n    const errorDisplay = inputControl.querySelector('.error');\r\n\r\n    errorDisplay.innerText = '';\r\n    inputControl.classList.remove('error');\r\n    inputControl.classList.add('success');\r\n}"]}